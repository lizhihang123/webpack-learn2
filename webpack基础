# 1. webpack基础

## 1.1 安装



第一步，创建一个文件夹`demo` 创建一个git仓库

```js
git init
```



第二步，里面创建一个src文件夹，src里面创建main.js文件



第三步，

```bash
推荐
npm i webpack webpack-cli -D

不推荐
npm i webpack webpack-cli -g
```

不全局安装，因为webpack是要基于项目开发的

>webpack-cli 是从 webpack包分离出来的



第四步：

创建一个`index.html`文件，和`src`文件夹是同级的



第五步：

创建`webpack.config.js`和src文件夹同级

## 1.2 webpack-cli使用

1 因为没有 `npm i webpack webpack-cli -g`, 所以直接命令行输入 webpack指令会报错

![image-20220717092429995](C:\Users\huawei\AppData\Roaming\Typora\typora-user-images\image-20220717092429995.png)



2 直接输入`npx webpack` 会报错

npx是 npm5.2以上 提供的一个命令

![image-20220717092558997](C:\Users\huawei\AppData\Roaming\Typora\typora-user-images\image-20220717092558997.png)

提示找不到src目录 没有入口文件



3 当创建src/index.js

里面写上语句 console.log(1) 再输入 npx webpack

能够打包成功



## 1.3  npx的运行过程

1 去node_modules/.bin/webpack.cmd 判断当前目录是否存在node.exe文件 

2 不存在就去 会去当前目录 的上一级的 \webpack\bin\webpack.js

   下图表示 cmd与用户进行的交互，没有安装 提示是否安装。以及采用什么样的方式进行安装

![image-20220717095701771](C:\Users\huawei\AppData\Roaming\Typora\typora-user-images\image-20220717095701771.png)

```diff
@ECHO off
GOTO start
:find_dp0
SET dp0=%~dp0
EXIT /b
:start
SETLOCAL
CALL :find_dp0

+ IF EXIST "%dp0%\node.exe" ( // 判断当前目录是否存在node.exe -> 不存在 因为安装在全局
  SET "_prog=%dp0%\node.exe"
) ELSE (
  SET "_prog=node"
  SET PATHEXT=%PATHEXT:;.JS;=;%
)

+ endLocal & goto #_undefined_# 2>NUL || title %COMSPEC% & "%_prog%"  "%dp0%\..\webpack\bin\webpack.js" %*
=> 会去当前目录 的上一级的 \webpack\bin\webpack.js

```



## 1.4 webpack应用场景

>应用在node端还是在浏览器端？

在node端 开发服务器时，一个文件一个模块，不需要打包也没关系

但是在浏览器端，最好是只执行一个文件



```js
// a.js文件
let a = '小李'
module.exports = {
    name: a
}
// export default {
//     name: a
// }
```



```js
// index.js文件
const a = require('./a')
// import a from './a'
console.log(a);
console.log('1');
```



执行npx webpack打包后，这里的CommonJS语法，直接右键执行dist/main.js文件 发现报错 多了括号

但是创建index.html 引入main.js的代码是OK的

此外，如果index.html文件引入src/index.js的代码是会报错，

>浏览器不能直接引入 src/index.js，要用打包好的文件。
>
>为什么？



## 总结：

1. 安装要安装 webpack 和 webpack-cli两个包，安装 -D,不是 -g或者-s，每个项目单独一个webpack即可，上线也不需要使用
2. webpack-cli的使用，直接webpack执行指令报错，因为不是全局的。要用npx webpack,0配置【没有webpack.config.js】，会默认执行src/index.js为入口文件
3. npx的运行或者 => node_modules/.bin/webpack.cmd => webpack/bin/webpack.js





## 1.5 webpack的核心概念

入口：哪个文件开始打包

出口：打包到哪个目录的文件夹下面

loader：webpack只能处理非js的模块，loader能够让webpack转化非js模块为有效的模块。

插件：打包优化和压缩



```js
module.exports = {
  // 入口
  entry: './src/bundle.js',
  // 出口
  output: {
    // 出口的文件夹
    path: './dist/',
    // 出口的文件名
    filename: 'main.js',
  },
  mode: 'production', // 默认是production 我们开发一般设置为development 这样使用起来 不会太耗费性能
}
```



![image-20220809084407139](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4575/image-20220809084407139.png)

如上报错，说明/dist/不是一个绝对路径，而是相对路径。要用path模块进行转化，用resolve或者是join方法都可以



![image-20220809085246027](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4575/image-20220809085246027.png)

入口文件不存在





![image-20220809085306395](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4575/image-20220809085306395.png)

mode属性要配置 `development` 或者是 `production`





## 1.6 开发时 修改配置文件名 与 自动编译工具的使用

### 如何增加多个打包文件？

第一步，新增配置文件`webpack.customConfig.js`

且修改里面的**打包出口的文件名**，就能够测试成功



第二步，修改package.json文件里面对应的指令，

```js
"scripts": {
	"build": "webpack-cli --config webpack.customConfig.js"
},
```



第三步，yarn build，就能够打包出新的文件





2 自动编译工具的使用



### 使用watch命令

```diff
  "scripts": {
    "build": "webpack-cli --config webpack.customConfig.js",
+    "watch": "webpack-cli --watch"
+    "watch": "webpack-cli --watch --config webpack.customConfig.js" // 这样写能够监听非默认的配置文件
  },
```

运行

```js
npm run watch 
能够监视 bundle.js变化，最终导出到main.js文件，去index.html里面查看的到效果
```





在配置文件里面增加watch配置项 true即可

```diff
const path = require('path')


module.exports = {
  entry: './src/main.js',
  output: {
    // path: path.join(__dirname, './dist/'),
    path: path.resolve('./dist/'),
    filename: 'bundle.js',
  },
  mode: 'production',
+  watch: true,
}
```





补充：

绝对路径

```js
import "/home/me/file";

import "C:\\Users\\me\\file";


```





相对路径

```js
import "../src/file1";
import "./file2";
```





### webpack-dev-server指定

第一步，下包

```js
npm i webpack-dev-server -D
```





第二步，理解 为什么有了上面的·watch·模式，还需要这个插件？

>1. watch模式，能够自动检测资源的变化，重新打包，但是打包的结果存储在硬盘里面，I/O读取非常的耗费资源。
>1. dev 打包的资源会存储在内存中，减少去硬盘里面的查找时间【也能够自动检测 打包】



第三步，package.json文件里面配置

```diff
{
  "devDependencies": {
    "webpack": "^5.74.0",
    "webpack-cli": "^4.10.0",
    "webpack-dev-server": "^4.10.0"
  },
  "scripts": {
    "build": "webpack-cli",
+    "serve": "webpack-dev-server --hot --port 8080 --open"
  }
}

```





第四步 `npm run serve` 启动，发现如下错误。

<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4575/image-20220809103528457.png" alt="image-20220809103528457" style="zoom:50%;" />

是因为自动帮我们生成了一个public文件夹，不是我们要的

![image-20220809103835708](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4575/image-20220809103835708.png)



第五步，去webpack.config.js里面，需要设置`static`属性，

这个属性控制我们访问哪个路径的静态资源。

设置为'/'表示访问当前根目录下的，启动项目时它会去找`index.html`文件。

如果设置/dist，项目启动开来就是下图界面

```diff
const path = require('path')
module.exports = {
    entry: './src/main.js',
    output: {
        path: path.join(__dirname, './dist/'),
        filename: 'bundle.js'
    },
    mode: 'development',
    devServer: {
+        static: path.join(__dirname, '/'),
    },
}
```

<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4575/image-20220809103616285.png" alt="image-20220809103616285" style="zoom:50%;" />



这样是OK的

![image-20220809103853209](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4575/image-20220809103853209.png)



<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4575/image-20220809103723066.png" alt="image-20220809103723066" style="zoom:50%;" />



第六步，修改和src同级的index.html里面的script引入的bundle.js文件的引入



如果index.html文件被服务器打开来。修改main.js入口文件里面的代码，而index.html的内容不更新。原因是：

​	1. index.html里面引入的文件是`/dist/bundle.js`，要改成`bundle.js`就能够实现更新。要引入根目录下面的bundle.js，而不是/dist/bundle.js。

​    2. 底层是webpack-dev-server，在内存中生成一个bundle.js文件，放到了,根目录'/'里面而不是'/dist'。所以index.html访问的要改为根目录下的`bundle.js`而不是原本的`./dist/index.html`



<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4575/image-20220809104402429.png" alt="image-20220809104402429" style="zoom:67%;" />



<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4575/image-20220809104111239.png" alt="image-20220809104111239" style="zoom:50%;" />





第七步，知道并能够配置webpack-dev-server相关的操作命令

```
hot:是否开启浏览器的热更新。
port:打开的服务器的端口号
open:是否自动打开？
static:读取哪里的静态资源？
```







### html-webpack-plugin插件

第一步，注销webpack.config.js里面的这个配置

```js
  // 自动编译工具
  devServer: {
    static: path.join(__dirname, '/'),
  },
```



此外，如果你在package.json文件里面，也要配置这个指令，也要修改

```diff
  "scripts": {
    "build": "webpack-cli",
+    "serve": "webpack-dev-server --hot --port 8080 --open --static src"
  }
```



改为

```js
  "scripts": {
    "build": "webpack-cli",
    "serve": "webpack-dev-server --hot --port 8080 --open"
  }
```





```js
1 上面我们讲过，此时`index.html`文件在src目录下，如下图。
  如果没有`static`指令，打开来就是如下的界面
2 原因是，此时访问的是当前项目的根目录
3 我们可以通过`html-webpack-plugin`插件 解决这个问题。
```

<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4575/image-20220809132507369.png" alt="image-20220809132507369" style="zoom:50%;" />

![image-20220809132953298](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4575/image-20220809132953298.png)





第三步，下包，这个包

```js
yarn add html-webpack-plugin -D
```

第四步，webpack.config.js 引入

```js
const HtmlWebpackPlugin = require('html-webpack-plugin')
```

第五步，html-webpack-plugin里面进行配置

```js
  插件
  plugins: [
    new HtmlWebpackPlugin({
      // 2. 生成的新的html文件的文件名叫作。生成的新的html文件放在项目的根目录下面。
      filename: 'index.html',
      // 1. 依靠src下面index.html文件，生成新的html文件，
      template: './src/index.html',
    }),
  ],
```

重启项目，这样以后 项目就能够正常的显示



总结：

1. html-webpack-plugin包的作用：能够依赖一个html文件，在内存中生成新的html文件，放到根目录下面
2. `webpack-dev-middleware`这个包 依赖 `html-webpack-plugin` 这个plugin



### webpack-dev-middleware

第一步，安装 `express` 和 `webpack-dev-middleware`包，

```bash
yarn add express webpack-dev-middleware -D
```



```js
1 webpack-dev-server内部底层就是使用了webpack-dev-middleware这个中间件。
  webpack-dev-middleware是一个容器，能够把资源经过webpack处理好后，交给express服务器使用。

2 webpack-dev-server开发更加常用，
  webpack-dev-middleware 如果需要经过服务器做更加多的操作可以用它。

3 这个插件 必须依赖 html-webpack-plugin 否则html文件 无法正常的生成到express服务器上面去
```

第二步，新建sever.js，书写如下代码

```js
const express = require('express')
const webpackDevMiddleware = require('webpack-dev-middleware')
const webpack = require('webpack')
const config = require('./webpack.config')

const app = express()
const compiler = webpack(config)
app.use(
  // publicPath 表示最终的文件生成好 放在哪里 ？ 放在根目录
  // 1 compiler 走config里面的配置 编译 2 放在 / 根目录下面
  webpackDevMiddleware(compiler, {
    publicPath: '/',
  })
)
// 注意app.use里面的webpackDevMiddleware 这个方法 返回的是一个中间件

app.listen(3000, () => {
  console.log('this server is running at http://localhost:3000')
})
```



第三步，package.json里面设置指令，

```diff
  "scripts": {
    "build": "webpack-cli --config webpack.customConfig.js",
    "watch": "webpack-cli --watch",
    "dev": "webpack-dev-server --open --hot --port 9090",
+    "serve": "node server.js"
  },
```



第四步，然后 `yarn serve`运行，修改src/index.js文件里面的内容，浏览器刷新，能够更新



第五步，总结：

```js
1. server插件 底层利用了 middleware插件，而后者借助express插件。先去解析webpack.config.js里面指定的入口文件，去解析打包，然后交给express服务器，开启

2. middleware插件必须依赖 html-webpack-plugin插件使用
```





## 1.7 loader的学习

1. 知道什么场景需要这个loader
2. 知道loader怎么用的 有哪些配置

### css-loader

第一步，创建css文件夹，和index.css文件并再src/main.js里面引入



```js
import './css/index.css'
```



第二步，如果报如下错误错，就是引入错误

![image-20220811135607920](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4575/image-20220811135607920.png)

![image-20220811140109911](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4575/image-20220811140109911.png)



原本

```js
import './css/index'
```

后来正确的，就是因为如果直接写index， 访问的先去找 .js .json .wasm 找不到就报错了

```js
import './css/index.css'
```







第三步，安装 style-loader css-loader 不要拼错 

```bash
yarn add style-loader css-loader -D
```



第四步，配置webpack.config.js文件，并理解，use里面的loader的执行顺序

记住，一定是,module里面配置rules，不然会报错

```js
  module: {
        rules: [
            // 1. css处理
            // use里面的loader读取顺序：从右 -> 左
            // css-loader - 先成功编译css代码
            // style-loader - 再把css代码放到index.html上去
            {
              test: /\.css$/,
              use: ['style-loader', 'css-loader'],
            },
        ],
    }
```





### less-loader

第一步，安装 less less-loader包

```js
yarn add less-loader less -D
```





第二步，`src/less/index.less`下面创建一个less文件,引入到main.js



ps：如果出现如下错误

![](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4575/image-20220811140929368.png)

缺了less包

![image-20220811141456389](C:/Users/huawei/AppData/Roaming/Typora/typora-user-images/image-20220811141456389.png)



第三步，配置

依旧需要 less-loader 转化less为css， css-loader编译css代码，style-loader把css代码作用到html上面去



```js
      // 2. less处理
      {
        test: /\.less$/,
        use: ['style-loader', 'css-loader', 'less-loader'],
      },
```





### sass-loader

第一步，下包： `node-sass sass-loader`

第二步，使用

```js
// 3. scss处理
{
    test: /\.scss$/,
    use: ['style-loader', 'css-loader', 'sass-loader'],
},
```



第三步，创建scss文件夹，创建scss/index.scss文件



重大错误：

```js
1. demo/1. base是我的项目
新建一个命令行 结果地址是demo的，导致每次下包 都下到了demo上，
2. 下面少加了一个$ 导致所有的loader都失败了
```

<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4575/image-20220811144336373.png" alt="image-20220811144336373" style="zoom:50%;" />





### `file-loader`和url-loader都干嘛用的?



第一步，直接在html文件里面使用img图片，npm run serve

![image-20220816145453196](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4575/image-20220816145453196.png)

发现会报错

其实最新的webpack5可以不用这两个包，如果要打包图片，可以这样配置

因为webpack5新增了一个loader `asset loader`，这个是内置，不需要额外下包，能够直接替代 `url-loader file-loader raw-loader`

```js
// 图片的处理
  {
    test: /\.(png|jpg|jpeg|png)$/,
    type: 'asset/resource',
  },
  // 字体图标的处理
  {
    test: /\.(svg|eot|woff|woff2|ttf)/,
    type: 'asset/inline',
    generator: {
      dataUrl: (content) => {
        content = content.toString()
        // 注意要下包 yarn add svgToMiniDataURI -D + const svgToMiniDataURI = require('svgToMiniDataURI')
        return svgToMiniDataURI(content)
      },
    },
  },
```





如果硬是要在webpack5里面使用之前的配置，增加如下代码即可

```diff
// 4. file-loader图片的处理
  {
    test: /\.(png|jpg|gif|jpeg)$/i,
    use: [
      {
        loader: 'file-loader',
        options: {
          // 限制大小 表示字节
          limit: 8192,
          // 名字 表示 【原始的名字】-hash值【防止重复用的】.【原本的扩展至】
          name: '[name]-[hash:4].[ext]',
          // 输出文件到指定的文件夹
          outputPath: 'images',
        },
      },
    ],
    // 必须加这个新的type属性 限制 webpack5的 [assets loader]
+    type: 'javascript/auto',
  },
  // 5. 字体图标的处理
  {
    test: /\.(woff|woff2|svg|eot|ttf)$/i,
    use: [
      {
        loader: 'url-loader',
        options: {
          limit: 8192,
          name: '[name]-[hash:4].[ext]',
          outputPath: 'fonts',
        },
      },
    ],
+    type: 'javascript/auto',
  },
```





如果提示 打包的文件过大 超过了体积 怎么办下面可以先配置一下 不报错【但是要反思为什么会有这个报错,bootStrap引入 就用线上cdn就好】

```js
  // 最大打包体积
  performance: {
    maxEntrypointSize: 1000 * 1024,
  },
```



1KiB就是1KB = 1024字节

1K = 1000字节



如果要使用bootstrap这个包时，之前用过这个版本的：可以直接用线上cdn 减少包的体积

```js
bootstrap@3.4.1
```





server:

1. 看没有那个html有没有关系 没有报错 就是他
2. 换个名字看看行不行 不行
3. 试试看 dev行不行 没有报错
4. 注销package.json里面的 dev --static src 也失败了



### babel

1. babel-loader 给webpack用的
2. @babel/core包是核心包，
3. **@babel/preset-env**这个包里面，集结了很多ES6+的降级语法
4. 如果有降级，报错的，可以查看node终端，yarn build 如果无法解析，会提示你去安装哪个包





#### 箭头函数

第一步，安装如下包

```js
yarn add babel-loader @babel/env -D
```



第二步，先写高级的ES6语法，看看能够在yarn build后被降级

```js
// 1. 箭头函数
const fn = () => {
  console.log('你好呀')
  return 111
}

fn()
console.log(fn)

// 2. class类
class VueRouter {
  constructor(age) {
    this.age = age
  }
}
const router = new VueRouter('19')
console.log(router)

// 3. class更加高级的写法 static静态成员 和 直接添加属性
class Boy {
  height = '180'
  static weight = '120'
}

const boy1 = new Boy()
console.log(boy1)
console.log(Boy.weight)


// 4. generator函数
function * fn2 () {
    yield 3
}
let r1 = fn2()
r1.next()

// 5. 数组的方法
const arr1 = [1, 2, 3]
arr1.includes(1)
```









第三步，执行yarn build,去bundle.js里面查看是否被降级



箭头函数没有被降级

![image-20220816143158313](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4575/image-20220816143158313.png)



class没有被降级

![image-20220816145036253](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4575/image-20220816145036253.png)

这里还出现了小插曲，我使用了console.log语句，webpack5版本是不能够被解析的。

需要下载两个包，`console-browserify` `assert`

webpack.config.js里面，和其他的配置同级别的

```js
    resolve: {
        fallback: {
            "console": require.resolve("console-browserify"),
            "assert": require.resolve("assert/")
        }
    }
```



报错信息

```js
Can't resolve 'assert' in 'D:\heima\front\8. webpack学习\demo1\node_modules\console-browserify'
```

```js
 Can't resolve 'console' in 'D:\heima\front\8. webpack学习\demo1\src'
```





第四步，babel进行配置

```js
// babel降级处理
{
test: /\.js$/,
use: {
  loader: 'babel-loader',
  options: {
    presets: ['@babel/env'],
    // plugins: ['@babel/plugin-proposal-class-properties'],
  },
},
exclude: /node_modules/,
},
```





![image-20220813132120036](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4575/image-20220813132120036.png)

npm run build也能够成功 见 bundle.js里面的结果 我猜测class里面的更高级的方法 页北京加入到`@babel/env` 本来以为要`@babel/plugin-proposal-class-properties`这个插件的

![image-20220813140034990](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4575/image-20220813140034990.png)

静态成员 参考文章[点击跳转](https://blog.csdn.net/qzw752890913/article/details/105531063?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166037022616780357255722%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166037022616780357255722&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-105531063-null-null.142^v40^pc_rank_34,185^v2^control&utm_term=class%20%E9%9D%99%E6%80%81%E5%B1%9E%E6%80%A7&spm=1018.2226.3001.4187)





打包generator函数，发现也能够解析了

本来以为要插件`npm install --save-dev @babel/plugin-proposal-async-generator-functions`

```js
{
  "plugins": ["@babel/plugin-proposal-async-generator-functions"]
}
```

npm run build或者是npm run dev都能够成功的解析 generator

![image-20220813140744609](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4575/image-20220813140744609.png)

查看到官网的描述，这个插件被集结到了 `@babel/preset-env`

![image-20220813142115983](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4575/image-20220813142115983.png)



安装了这几个包

```js

```



`.babelrc`文件的使用

>能够让webpack文件更加的清爽，babel的问题单独取一个文件配置 可读性更高

创建该文件

```js
{
  "presets": [["@babel/preset-env"]]
}
假如有插件 就添加一个 plugins属性：[]
```



修改webpack.config.js

```js
// babel降级处理
{
    test: /\.js$/,
    use: {
      // 这只留这个给webpack用
      loader: 'babel-loader',
      // 下面的options删去
    },
	exclude: /node_modules/,
},
```





转换一些数组或者字符串的方法

str.includes

1. 因为js是动态语言，在代码执行时，可以随时为对象或者数组添加方法或者属性
2. includes会被识别为是一个属性，而不会识别为ES6新语法，进行降级的解析

![image-20220813150813387](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4575/image-20220813150813387.png)





下包

```js
yarn add core-js -S
// -S 和 -D的区别
```



在哪里使用includes语法，就引入

import 'core-js'

yarn build之后查看，发现打包后的文件，帮我们对includes做了兼容性的处理

![image-20220813151618088](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4575/image-20220813151618088.png)





source map的使用



开发环境 适合 `eval-cheap-module-source-map`

增加如下配置，能够在开发的时候更好的定位到错误的代码，而不附加额外的配置，比如babel解析，还没有解析。

```
module.exports = {
  mode: 'development',
  entry: './src/main.js',
+  devtool: 'eval-cheap-module-source-map',
```



而在生产环境，适合配置：`none`

我们不希望生产环境 能够点到源代码里面去，如果能够点进去，别人就能够看见源码了

```js
module.exports = {
  mode: 'development',
  entry: './src/main.js',
+  devtool: 'none', // 这样写是错的，直接不写devtool就好了 不需要加none
```

如果报如下错误，代表devtool的配置项写错了。

![image-20220813155426963](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4575/image-20220813155426963.png)



读官网

![image-20220813155639300](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4575/image-20220813155639300.png)







>8-16日 记录：
>
>1. 图片的操作出现了问题
>
>  在src/index.html里面引入了imgs里面的图片，结果yarn serve是无法显示的，但是yarn serve是可以的。但是yarn serve如果去掉了static，又不行了，这里有点问题
>
>2. 换成原始的写法 还是失败的 还不如 那个type的写法



# 补充知识

1. path.resolve path.join两个方法的比较 差异
2. hot 热更新是啥意思?
3. webpack-dev-middleware这个中间件的源码
4. mode: production development none

```js
开发环境：更快的编译速度和热更新
测试环境：支持单元测试
生产环境：更小的体积和更快的性能
```

```js
development: 会将DefinePlugin中 process.env.NODE_ENV 的值设置为 development,为模块和chunk启用确定的名称
production: 会将DefinePlugin中 process.env.NODE_ENV 的值设置为 production,为模块和chunk启用确定性的 混淆名称，开启FlagDependencyUsagePlugin，FlagIncludedChunksPlugin，ModuleConcatenationPlugin，NoEmitOnErrorsPlugin 和 TerserPlugin
none: 不使用任何默认优化选项

var config = {
    ...
    entry: './app.js'
    ...
  };

  module.exports = (env, argv) => {
    if (argv.mode === 'development') {
      config.devtool = 'source-map';
    }

    if (argv.mode === 'production') {
      //...
    }

    return config
  }
```



